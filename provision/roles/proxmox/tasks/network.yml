---

# - name: Get the host part of the IP
#   shell: host {{ ansible_fqdn }} | awk '{print $4}'
#   register: host_ip

# - name: "update /etc/hosts {{ ansible_eth0.ipv4.address }}"
#   become: yes
#   lineinfile:
#     dest: /etc/hosts
#     state: present
#     line: "{{ ansible_vmbr0.ipv4.address }} {{ default_hosts}} {{ hosts }}"
#   when: host_ip

- name: "Change hostname to {{ hostname }}"
  become: yes
  hostname: name={{ hostname }}
  tags: "pve-cluster"

# - name: "check if /etc/network/interfaces.new"
#   stat:
#     path: /etc/network/interfaces.new
#   register: interfaces_new

# - name: "Copy interfaces in interfaces.new"
#   shell: cp /etc/network/interfaces /etc/network/interfaces.new
#   when: interfaces_new.stat.exists == False

- name: "Configure network interfaces"
  template:
    src: "../templates/interfaces.j2"
    dest: "/etc/network/interfaces"
    owner: root
    group: root
    mode: 644

- name: "Configure network interfaces.new"
  template:
    src: "../templates/interfaces.j2"
    dest: "/etc/network/interfaces.new"
    owner: root
    group: root
    mode: 644

- name: restart networking
  become: yes
  service:
    name: "networking"
    state: restarted

# - name: "Add vmbr0 bridge"
#   blockinfile:
#     dest: /etc/network/interfaces.new
#     marker: "# {mark} ANSIBLE MANAGED BLOCK #"
#     block: |
#       auto vmbr0
#       iface vmbr0 inet static
#               address  176.31.107.126
#               netmask  255.255.255.0
#               gateway  176.31.107.254
#               bridge_ports eth0
#               bridge_stp off
#               bridge_fd 0

#       iface vmbr0 inet6 static
#               address  2001:41d0:0008:1c7e::
#               netmask  64

#           post-up echo 1 > /proc/sys/net/ipv4/ip_forward
#           post-up   iptables -t nat -A POSTROUTING -s '10.10.10.0/24' -o eth0 -j MASQUERADE
#           post-down iptables -t nat -D POSTROUTING -s '10.10.10.0/24' -o eth0 -j MASQUERADE

- name: restart machine
  shell: shutdown -r now "Ansible updates triggered"
  async: 1
  poll: 0
  ignore_errors: true
  when: restart

- name: 'waiting for server to come back {{ inventory_hostname }}'
  local_action: wait_for host={{ inventory_hostname }} state=started
  when: restart

...
